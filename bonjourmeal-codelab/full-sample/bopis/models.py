# pylint: disable=no-member

# Copyright 2020 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Model definitions that are translated into autogenerated migrations. These
migrations can be applied to a SQL database to create schema associated
with models defined in this file.
'''

from django.db import models
from django.utils import timezone

class Conversation(models.Model):
    '''
    A class to represent a conversation tied to a user.
    '''
    def __str__(self):
        '''
        A string method used to determine how the object should be printed.
        '''
        return f"{self.id}"
    id = models.CharField(max_length=64, unique=True, primary_key=True)

    shopping_cart = models.ForeignKey('ShoppingCart',
        on_delete=models.PROTECT,
        null=True,
        default=None,
        blank=True)

    past_carts = models.ManyToManyField('ShoppingCart',
        related_name="past_purchases")

    def create_new_cart(self):
        '''
        A method to create a new cart associated with a conversation.
        '''
        if self.shopping_cart:
            if not self.shopping_cart.purchased:
                self.shopping_cart.abandoned = True
                self.shopping_cart.abandoned_timestamp = timezone.now()
            self.past_carts.add(self.shopping_cart)

        new_cart = ShoppingCart()
        new_cart.save()

        self.shopping_cart = new_cart
        self.save()

class Item(models.Model):
    '''
    A class to represent an item in the inventory.
    '''
    def __str__(self):
        '''
        A string method used to determine how the object should be printed.
        '''
        return f"{self.name} - ${self.price}{self.currency}"

    menu_type_choices = [('F', 'Food'), ('D', 'Drink') ]

    menu_type = models.CharField(max_length=1,
        choices=menu_type_choices,
        default="F")
    name = models.CharField(max_length=128)
    price = models.DecimalField(decimal_places=2, max_digits=10)
    currency = models.CharField(max_length=5)
    image_url = models.URLField()
    available = models.BooleanField(default=True)

class ShoppingCart(models.Model):
    '''
    A class to represent a user's shopping cart.
    '''
    creation_timestamp = models.DateTimeField(auto_now_add=True)
    total_paid = models.DecimalField(decimal_places=2,
        max_digits=10,
        default=0)
    currency = models.CharField(max_length=5, default='USD')
    purchased = models.BooleanField(default=False)
    purchase_timestamp = models.DateTimeField(default=None, blank=True, null=True)
    abandoned = models.BooleanField(default=False)
    abandoned_timestamp = models.DateTimeField(default=None, blank=True, null=True)

    pickup_date = models.DateField(default=None, null=True, blank=True)
    pickup_datetime = models.DateTimeField(default=None, null=True, blank=True)

class ShoppedItem(models.Model):
    '''
    A class to represent an item that a user has placed in their shopping cart.
    '''
    item = models.ForeignKey(Item, on_delete=models.PROTECT)
    cart = models.ForeignKey(ShoppingCart, on_delete=models.PROTECT)
    cart_placement_timestamp = models.DateTimeField(default=None, blank=True, null=True)
    quantity = models.IntegerField(default = 1)

    def place_in(self, cart):
        '''
        A method to place an item into a cart tied to a user's conversation.
        '''
        self.cart = cart
        self.save()
